		知识点1 : 在git中下拉代码的方法

第一种方法
1.首先在一个合适的位置建一个文件夹
2.鼠标右键,点击git Bush Here 进入黑框操作界面
3.输入 git init (将该文件夹变成可以被git管理的文件夹,然后会出现.git的文件夹,说明成功)
4.输入 git remote add origin(参数为设置的上传的名字) git@github.com:michaelliao/learngit.git(参数为下载的地址)
5.输入 git pull origin(参数为设置的上传的名字) master(主分支)

第二种方法:
git clone git@github.com:michaelliao/gitskills.git(参数为下载的地址)


		知识点2 : 在git中上传git库的方法
在修改代码后想要上传到git库:1.首先输入 git add .(.是上传所有修改后的代码,也可以上传某个文件,打文件名就可以) (这个是从工作区上传到暂存区)
			    2.git commit -m '注释的话'  (这个是从暂存区上传到master分支)
			    3.git push origin(你设置的上传的名字) master  (上传的git库)


		知识点3 : 如果你的代码修改的有错误
1.如果你只是修改了代码,还没有 git add .  :
方法: git checkout -- .(如果参数是'.',就是将工作区所有的修改还原为未修改状态,也可以是写文件名称,就是将该文件的修改还原)

2.如果你已经 git add . 了(就是添加到暂存区了)
方法: git reset HEAD .(.的作用就是所有,也可以是文件名),这样就是把暂存区放回工作区,然后再用方法1,就可以了

3.已经git commit origin master了,可以版本回退，不过前提是没有推送到远程库


		知识点4 : 创建分支
1.git checkout -b dev(分支名)  : 这个操作是,创建dev分支,并切换到dev分支上

注:1的操作可以分为两步  1.git branch dev(创建dev分支)  2.git checkout dev(切换到dev分支)

2.git brance  : 这个操作是查看当前分支

3.如果你想讲dev分支合并到master分支,需要先切换到master分支,然后 git merge dev 就是将dev分支合并到master分支
4.git branch -d dev 删除dev分支

		知识点5 : 查看分支合并图
1.git log --graph --pretty=oneline --abbrev-commit     2.git log --graph


		知识点6 : (分支管理策略:暂时用不上,但是严格要求时,可以看廖雪峰的git教程:分支管理策略)
	
知识点7 : 	
如果有未完成的工作,但是突然有个bug需要修改,需要暂存工作区现场,以便之后操作:
操作方法: 1.如果手里工作未完成,不能做提交操作,那么可以 : git stash(这个操作可以保存工作区现场,而且git status检查状态时,工作区是干净的)
	  2.这样就可以切换到master分支去修改bug了
	  3.然后回到自己分支工作时,需要恢复之前的工作现场 : 可以先用 git stash list(查看保存的工作现场列表)
	  4.恢复工作现场的方法: (1)git stash apply stash@{0}(这个参数是需要恢复的某个现场,但是这么做,stash的记录没有删除)   git stash dropstash@{0}(这个参数是需要恢复的某个现场) 删除这个工作现场
				(2)git stash pop stash@{0} (恢复工作现场的同时,删除这个工作现场的保存记录)

知识点8 : 如果在你建的分支上,已经add+commit了,但是这时告诉你,不需要合并了,这个分支不要了,你要删除 但是git branch -d 分支名 这个操作不能用,因为git会提醒你,这个分支未合并,所以需要用强制删除 git branch -D 分支名(这个操作就是将小写d,变成了D,就是强制删除分支)

知识点9 : 查看远程库信息 1.git remote(就是获取上传的名字)  2.git remote -v(就是获取上传的名字和链接)

知识点10 : 命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	       git tag -a <tagname> -m "此处打注释" 可以指定标签信息；
	       git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；(这个不懂)
	       git tag可以查看所有标签。

	   删除标签:1.删除本地标签 git tag -d 标签名(版本名)
		    2.可以将本地的标签推到远程 : git push origin v1.0(这是上传本地v1.0标签到远程)
						 git push origin --tags(这是上传本地所有标签到远程)
		    3.要删除已经上传的远程的标签: 1.首先删除本地标签(git tag -d 标签名)
						  2.然后删除远程 (git push origin :refs/tags/标签名)




